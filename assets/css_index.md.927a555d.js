import{_ as l,y as i,S as e,M as a}from"./chunks/framework.d290a28e.js";const m=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"css/index.md","filePath":"css/index.md"}'),s={name:"css/index.md"},t=a('<h3 id="说说对css层叠上下文的理解" tabindex="-1">说说对CSS层叠上下文的理解 <a class="header-anchor" href="#说说对css层叠上下文的理解" aria-label="Permalink to &quot;说说对CSS层叠上下文的理解&quot;">​</a></h3><p>参考题解：</p><p>当我们浏览网页时，元素除了在水平的x轴、y轴上进行排列外，在与网页垂直的视线方向上，还有一个类似于z轴的存在，当元素在z轴方向上发生堆叠时，他们之间会发生覆盖。 而当元素处于一个层叠上下文中时，会遵循一定的层叠顺序进行堆叠排列。</p><p>层叠顺序不仅仅是由z-index值所决定，当比较两个元素的堆叠情况时：</p><ul><li>首先比较两个元素是否处于同一个层叠上下文中：若处于不同的层叠上下文，则先比较两个层叠上下文的层叠等级；若处于同一层叠上下文，则按照下面的层叠顺序进行比较。</li><li>当两个元素层叠等级相同、层叠顺序相同时，那么在DOM结构中处于后面的元素层叠等级更高。</li></ul><p>元素的层叠顺序由高到低：</p><ul><li>正z-index</li><li>z-index:auto/z-index:0</li><li>inline/inline-block水平盒子</li><li>float浮动盒子</li><li>block块状水平盒子</li><li>负z-index</li><li>层叠上下文元素的background/border</li></ul><p>参考资料：</p><ul><li><a href="https://www.zhangxinxu.com/wordpress/2016/01/understand-css-stacking-context-order-z-index/" target="_blank" rel="noreferrer">深入理解CSS中的层叠上下文和层叠顺序</a></li><li><a href="https://juejin.cn/post/6844903667175260174" target="_blank" rel="noreferrer">彻底搞懂CSS层叠上下文、层叠等级、层叠顺序、z-index</a></li></ul><h3 id="图片布局-实现图片木桶布局-原百度图片布局方式" tabindex="-1">图片布局：实现图片木桶布局（原百度图片布局方式） <a class="header-anchor" href="#图片布局-实现图片木桶布局-原百度图片布局方式" aria-label="Permalink to &quot;图片布局：实现图片木桶布局（原百度图片布局方式）&quot;">​</a></h3><p>参考题解：</p><p>木桶布局方式，图片每行高度相等、两端对齐，大致思路：</p><ul><li>设定一个每行的初始高度，根据初始高度和图片宽度，计算每行的图片数量，使每行图片总宽度小于等于行宽</li><li>确定一行的图片数量后，再根据每张图片的宽高比例进行等比放大，计算出每张图片实际的宽高，保证图片撑满行宽</li><li>创建图片元素，根据每张图片的实际大小，设置尺寸样式，并根据所在行的序号设置图片绝对定位的位置</li></ul><p><a href="https://github.com/AlisaLiCn/image-layout-demo" target="_blank" rel="noreferrer">图片木桶布局demo</a></p><h3 id="css优化和提升性能的方法" tabindex="-1">CSS优化和提升性能的方法 <a class="header-anchor" href="#css优化和提升性能的方法" aria-label="Permalink to &quot;CSS优化和提升性能的方法&quot;">​</a></h3><p>加载性能：</p><ul><li>css压缩：将css进行打包压缩，可以减小文件体积。</li><li>css单一样式：当需要下边距和左边距的时候，很多时候会选择使用<code>margin: top 0 bottom 0；</code>但 <code>margin-bottom: bottom; margin-left: left;</code>执行效率会更高。</li></ul><p>选择器性能：</p><ul><li>关键选择器（key selector）。选择器的最后面的部分为关键选择器（即用来匹配目标元素的部分）。CSS选择符是从右到左进行匹配的。当使用后代选择器的时候，浏览器会遍历所有子元素来确定是否是指定的元素等等；</li><li>如果规则拥有ID选择器作为其关键选择器，则不要为规则增加标签。过滤掉无关的规则（这样样式系统就不会浪费时间去匹配它们了）。</li><li>避免使用通配规则，如*{}计算次数惊人，只对需要用到的元素进行选择。</li><li>尽量少的去对标签进行选择，而是用class。</li><li>尽量少的去使用后代选择器，降低选择器的权重值。后代选择器的开销是最高的，尽量将选择器的深度降到最低，最高不超过三层，更多的使用类来关联每一个标签元素。</li><li>了解哪些属性是可以通过继承而来的，然后避免对这些属性重复指定规则。</li></ul><p>渲染性能：</p><ul><li>慎重使用高性能属性：浮动、定位。</li><li>尽量减少页面重排、重绘。</li><li>去除空规则：｛｝。空规则的产生原因一般来说是为了预留样式。去除这些空规则能减少css文档体积。</li><li>属性值为0时，不加单位。</li><li>属性值为浮动小数0.**，可以省略小数点之前的0。</li><li>标准化各种浏览器前缀：带浏览器前缀的在前。标准属性在后。</li><li>不使用@import前缀，它会影响 css 的加载速度。</li><li>选择器优化嵌套，尽量避免层级过深。</li><li>css雪碧图，同一页面相近部分的小图标，方便使用，减少页面的请求次数，但是同时图片本身会变大，使用时，优劣考虑清楚，再使用。</li><li>正确使用 display 的属性，由于 display 的作用，某些样式组合会无效，徒增样式体积的同时也影响解析性能。</li><li>不滥用 web 字体。对于中文网站来说 WebFonts 可能很陌生，国外却很流行。web fonts 通常体积庞大，而且一些浏览器在下载 web fonts 时会阻塞页面渲染损伤性能。</li></ul><p>可维护性、健壮性：</p><ul><li>将具有相同属性的样式抽离出来，整合并通过class在页面中进行使用，提高css的可维护性。</li><li>样式与内容分离：可以将css代码定义到外部css中。</li></ul><h3 id="如何通过css开启硬件加速来提高网站性能" tabindex="-1">如何通过CSS开启硬件加速来提高网站性能 <a class="header-anchor" href="#如何通过css开启硬件加速来提高网站性能" aria-label="Permalink to &quot;如何通过CSS开启硬件加速来提高网站性能&quot;">​</a></h3><p>参考题解：</p><p>CPU 提供了指令集，会不断的执行取指令、译码、执行、取数、写回的指令周期，控制着计算机的运转。</p><p>CPU 计算的速度比较快，而访问内存比较慢，为了缓和两者的矛盾，引入了 L1、L2、L3 的多级缓存体系，L1、L2、L3 是容器逐渐变大，访问速度逐渐变慢的关系，但还是比访问内存快。内存会通过一个缓存行（64 字节）的大小为单位来读入缓存，供 CPU 访问。</p><p>3D 渲染的流程是计算每一个顶点的数据，连成一个个三角形，然后进行纹理贴图，之后计算投影到二维屏幕的每一个像素的颜色，也就是光栅化，最后写入显存帧缓冲区，这样进行一帧帧的渲染。</p><p>CPU 的计算是一个个串行执行的，对于 3D 渲染这种涉及大量顶点、像素要计算的场景就不太合适，于是出现了 GPU。</p><p>GPU 可以并行执行大量重复的计算，有成百上千个计算单元，相比 CPU 虽然执行不了复杂逻辑，但是却能执行大量重复的运算。提供了 opengl 的标准 api。</p><p>css 中可以使用 GPU 加速渲染来减轻 CPU 压力，使得页面体验更流畅，默认 transform、opacity、filter 都会新建新的图层，交给 GPU 渲染。对于这样的元素可以使用 will-change: 属性名; 来告诉浏览器在最开始就把该元素放到新图层渲染。</p><p>参考资料：</p><ul><li><a href="https://juejin.cn/post/7001634685927292936" target="_blank" rel="noreferrer">这一次，彻底搞懂 GPU 和 css 硬件加速</a></li></ul>',33),r=[t];function n(o,p,c,d,u,h){return i(),e("div",null,r)}const b=l(s,[["render",n]]);export{m as __pageData,b as default};
