import{_ as i,a as l,S as a,z as e}from"./chunks/framework.a9d5dab6.js";const _=JSON.parse('{"title":"","description":"","frontmatter":{},"headers":[],"relativePath":"browser/index.md","filePath":"browser/index.md"}'),r={name:"browser/index.md"},t=e('<h3 id="进程和线程" tabindex="-1">进程和线程 <a class="header-anchor" href="#进程和线程" aria-label="Permalink to &quot;进程和线程&quot;">​</a></h3><ul><li>一个进程就是一个程序的运行实例。详细解释就是，启动一个程序的时候，操作系统会为该程序创建一块内存，用来存放代码、运行中的数据和一个执行任务的主线程，我们把这样的一个运行环境叫进程。</li><li>多线程可以并行处理任务，但是线程是不能单独存在的，它是由进程来启动和管理的。</li></ul><p>进程和线程关系：</p><ol><li>进程中的任意一线程执行出错，都会导致整个进程的崩溃。</li><li>线程之间共享进程中的数据。</li><li>当一个进程关闭之后，操作系统会回收进程所占用的内存。</li><li>进程之间的内容相互隔离。</li></ol><h3 id="浏览器的多进程架构" tabindex="-1">浏览器的多进程架构 <a class="header-anchor" href="#浏览器的多进程架构" aria-label="Permalink to &quot;浏览器的多进程架构&quot;">​</a></h3><p>Chrome浏览器包括：1个浏览器（Browser）主进程、1个 GPU 进程、1个网络（NetWork）进程、多个渲染进程和多个插件进程</p><ul><li>浏览器进程。主要负责界面显示、用户交互、子进程管理，同时提供存储等功能。</li><li>渲染进程。核心任务是将HTML、CSS和JavaScript转换为用户可以与之交互的网页，排版引擎Blink和JavaScript引擎V8都是运行在该进程中，默认情况下，Chrome会为每个Tab标签创建一个渲染进程。出于安全考虑，渲染进程都是运行在沙箱模式下。</li><li>GPU进程。其实，Chrome刚开始发布的时候是没有GPU进程的。而GPU的使用初衷是为了实现3D CSS的效果，只是随后网页、Chrome的UI界面都选择采用GPU来绘制，这使得GPU成为浏览器普遍的需求。最后，Chrome在其多进程架构上也引入了GPU进程。</li><li>网络进程。主要负责页面的网络资源加载，之前是作为一个模块运行在浏览器进程里面的，直至最近才独立出来，成为一个单独的进程。</li><li>插件进程。主要是负责插件的运行，因插件易崩溃，所以需要通过插件进程来隔离，以保证插件进程崩溃不会对浏览器和页面造成影响</li></ul><h3 id="浏览器的渲染流程" tabindex="-1">浏览器的渲染流程 <a class="header-anchor" href="#浏览器的渲染流程" aria-label="Permalink to &quot;浏览器的渲染流程&quot;">​</a></h3><p>按照渲染的时间顺序，渲染流程可分为如下几个子阶段：</p><ul><li>构建DOM树</li><li>样式计算</li><li>布局阶段</li><li>分层</li><li>绘制</li><li>分块</li><li>光栅化和合成</li></ul><p>构建DOM树</p><ul><li>输入内容：HTML文件</li><li>处理过程：经由HTML解析器解析</li><li>输出内容：树状结构的DOM</li></ul><h3 id="缓存位置" tabindex="-1">缓存位置 <a class="header-anchor" href="#缓存位置" aria-label="Permalink to &quot;缓存位置&quot;">​</a></h3>',13),o=[t];function s(n,h,d,c,u,p){return l(),a("div",null,o)}const P=i(r,[["render",s]]);export{_ as __pageData,P as default};
